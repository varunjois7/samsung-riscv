Comparator code

// 1-Bit Comparator Implementation 

// Included the required header files 
#include <stdio.h> 
#include <debug.h> 
#include <ch32v00x.h> 

// Configuring GPIO Pins 
void GPIO_Config(void) { 
    GPIO_InitTypeDef GPIO_InitStructure = {0}; // structure variable used for GPIO configuration 
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE); // to enable the clock for port D 
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE); // to enable the clock for port C 

    // Input Pins Configuration 
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2; // Pins for A and B 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; // Defined as Input Type (Pull-Up) 
    GPIO_Init(GPIOD, &GPIO_InitStructure); 

    // Output Pins Configuration 
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6; // Pins for A > B, A < B, A == B 
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; // Defined Output Type 
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // Defined Speed 
    GPIO_Init(GPIOC, &GPIO_InitStructure); 
} 

// The MAIN function responsible for the execution of the program 
int main() { 

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1); 
    SystemCoreClockUpdate(); 
    Delay_Init(); 
    GPIO_Config(); 

    while(1) { 

        // Output the results 
        // A > B 
        if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1)==RESET && GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2)== SET) { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_4, SET); // Set A > B pin high 
        } else { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_4, RESET); // Set A > B pin low 
        } 

        // A < B 
        if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1)==SET && GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2)== RESET) { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_5, SET); // Set A < B pin high 
        } else { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_5, RESET); // Set A < B pin low 
        } 

        // A == B 
        if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1)==RESET && GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2)== RESET) { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_6, SET); // Set A == B pin high 
        }  
        else if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_1)==SET && GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_2)== SET) { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_6, SET); // Set A == B pin high 
        }  
        else { 
            GPIO_WriteBit(GPIOC, GPIO_Pin_6, RESET); // Set A == B pin low 
        } 
    } 
    return 0; 
}
